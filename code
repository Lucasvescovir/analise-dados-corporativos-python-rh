import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Gerando dados para um DataFrame maior
num_funcionarios = 500

# Listas para escolha aleatória
cargos_possiveis = ['Estagiário', 'Analista Jr.', 'Analista Pleno', 'Analista Sr.', 'Coordenador', 'Gerente', 'Diretor']
departamentos_possiveis = ['TI', 'Marketing', 'Vendas', 'RH', 'Financeiro', 'Operações']

# Mapeamento de salários base por cargo
salarios_base_cargo = {
    'Estagiário': {'min': 1500, 'max': 2500},
    'Analista Jr.': {'min': 3000, 'max': 4500},
    'Analista Pleno': {'min': 4800, 'max': 7000},
    'Analista Sr.': {'min': 6500, 'max': 10000},
    'Coordenador': {'min': 9000, 'max': 14000},
    'Gerente': {'min': 12000, 'max': 18000},
    'Diretor': {'min': 18000, 'max': 25000}
}

# Geração de dados controlada
nomes_aleatorios = [f'Funcionario_{i+1}' for i in range(num_funcionarios)]
cargos_aleatorios = np.random.choice(cargos_possiveis, size=num_funcionarios, p=[0.15, 0.25, 0.25, 0.15, 0.1, 0.07, 0.03])
departamentos_aleatorios = np.random.choice(departamentos_possiveis, size=num_funcionarios, p=[0.2, 0.15, 0.2, 0.1, 0.15, 0.2])

salarios_aleatorios = []
tempos_empresa_aleatorios = []
avaliacoes_desempenho_aleatorias = []

for i in range(num_funcionarios):
    cargo = cargos_aleatorios[i]
    
    # Gera tempo de empresa relacionado ao cargo (mais tempo para cargos mais altos)
    if 'Estagiário' in cargo:
        tempo = np.random.randint(1, 3)
    elif 'Jr.' in cargo:
        tempo = np.random.randint(1, 4)
    elif 'Pleno' in cargo:
        tempo = np.random.randint(3, 7)
    elif 'Sr.' in cargo or 'Coordenador' in cargo:
        tempo = np.random.randint(5, 10)
    else: # Gerente, Diretor
        tempo = np.random.randint(8, 15)
    tempos_empresa_aleatorios.append(tempo)

    # Gera salário dentro da faixa do cargo, com leve variação pelo tempo de empresa
    salario_min_cargo = salarios_base_cargo[cargo]['min']
    salario_max_cargo = salarios_base_cargo[cargo]['max']
    
    # Salário base no meio da faixa, com um "empurrão" pelo tempo de empresa
    salario = np.random.uniform(salario_min_cargo, salario_max_cargo)
    salario += (tempo - (salario_min_cargo + salario_max_cargo)/2 / 2000) * 50 # Leve impacto do tempo
    
    salarios_aleatorios.append(np.round(salario / 100) * 100) # Arredonda para centenas

    # Gera avaliação de desempenho com leve correlação com tempo e salário
    avaliacao = np.random.uniform(7.0, 9.5)
    if tempo > 5:
        avaliacao += np.random.uniform(0, 0.5) # Tendência a avaliação maior para mais tempo
    if salario > 10000:
        avaliacao += np.random.uniform(0, 0.3) # Tendência a avaliação maior para salários mais altos
    avaliacoes_desempenho_aleatorias.append(np.clip(avaliacao, 6.0, 10.0)) # Garante entre 6 e 10

# CRIAÇÃO DO DATAFRAME PRINCIPAL
df_grande = pd.DataFrame({
    'Nome': nomes_aleatorios,
    'Cargo': cargos_aleatorios,
    'Departamento': departamentos_aleatorios,
    'Salário': salarios_aleatorios,
    'Tempo_Empresa_Anos': tempos_empresa_aleatorios,
    'Avaliacao_Desempenho': avaliacoes_desempenho_aleatorias
})

# Adicionando a coluna 'Senioridade'
df_grande['Senioridade'] = np.where(df_grande['Tempo_Empresa_Anos'] >= 5, 'Sênior', 'Júnior')

print("--- NOVO DataFrame Expandido (df_grande) com", num_funcionarios, "funcionários e dados aprimorados ---")
print(df_grande.head())
print("\nInformações do DataFrame Expandido:")
df_grande.info()
print("\nEstatísticas Descritivas do Salário Expandido:")
print(df_grande['Salário'].describe())

# Média salarial por departamentos
media_salarial_departamentos = df_grande.groupby('Departamento')['Salário'].mean()
print('\nMédia salarial por departamentos:')
print(media_salarial_departamentos)

# Média de avaliação de desempenho por departamentos
media_avaliacao_departamentos = df_grande.groupby('Departamento')['Avaliacao_Desempenho'].mean()
print('\nMédia de avaliação de desempenho por departamentos:')
print(media_avaliacao_departamentos)

# Contagem de funcionários por departamentos
count_funcionarios_departamentos = df_grande.groupby('Departamento')['Nome'].count()
print('\nContagem de funcionários por departamentos:')
print(count_funcionarios_departamentos)

agrupado = df_grande.groupby('Departamento').agg(
    Media_Salarial=('Salário', 'mean'),
    Media_Avaliacao=('Avaliacao_Desempenho', 'mean'),
    Contagem_Funcionarios=('Nome','count')
)
print('\nMédia Salarial, Média de Avaliação de Desempenho e Contagem de Funcionários:')
print(agrupado)

# Gráfico de Barras 1
plt.figure(figsize=(8, 6))
sns.barplot(x=media_salarial_departamentos.index, y=media_salarial_departamentos.values, palette='viridis')
plt.title('Média Salarial por Departamento', fontsize=16)
plt.xlabel('Departamento', fontsize=12)
plt.ylabel('Média Salarial (R$)', fontsize=12)
plt.xticks(rotation=35, ha='right')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

#Gráfico de Barras 2
plt.figure(figsize=(8,6))
sns.barplot(x=media_avaliacao_departamentos.index, y=media_avaliacao_departamentos.values, palette='viridis')
plt.title('Média Avaliação de Desempenho por Departamento:')
plt.xlabel('Departamento', fontsize=12)
plt.ylabel('Média de Avaliação', fontsize=12)
plt.xticks(rotation=35, ha='right')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# Gráfico de dispersão 1
plt.figure(figsize=(10, 7))
sns.scatterplot(x='Salário', y='Avaliacao_Desempenho', data=df_grande, hue='Departamento', size='Tempo_Empresa_Anos', sizes=(50, 400), alpha=0.7)
plt.title('Relação entre Salário e Avaliação de Desempenho por Departamento', fontsize=16)
plt.xlabel('Salário (R$)', fontsize=12)
plt.ylabel('Avaliação de Desempenho', fontsize=12)
plt.grid(True, linestyle='--', alpha=0.6)
plt.legend(title='Departamento', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

# Gráfico de dispersão 2
plt.figure(figsize=(10,7))
sns.scatterplot(x='Tempo_Empresa_Anos', y='Salário', data=df_grande, hue='Senioridade', size='Avaliacao_Desempenho', sizes=(50,400), alpha=0.7)
plt.title('Relação entre Tempo na Empresa e Salário por Senioridade', fontsize=16)
plt.xlabel('Tempo na Empresa', fontsize=12)
plt.ylabel('Salário (R$)', fontsize=12)
plt.grid(True, linestyle='--', alpha=0.6)
plt.legend(title='Senioridade', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

# Gráfico de Histograma (Salário)
plt.figure(figsize=(10, 6))
sns.histplot(df_grande['Salário'], kde=True, bins='auto', color='skyblue', edgecolor='black')
plt.title('Distribuição dos Salários', fontsize=16)
plt.xlabel('Salário (R$)', fontsize=12)
plt.ylabel('Frequência', fontsize=12)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# Histograma para Tempo_Empresa_Anos
plt.figure(figsize=(10, 6))
sns.histplot(df_grande['Tempo_Empresa_Anos'], kde=True, bins='auto', color='lightgreen', edgecolor='black')
plt.title('Distribuição do Tempo de Empresa', fontsize=16)
plt.xlabel('Tempo de Empresa (Anos)', fontsize=12)
plt.ylabel('Frequência', fontsize=12)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# KDE Plot (Avaliacao_Desempenho)
plt.figure(figsize=(8, 5))
sns.kdeplot(df_grande['Avaliacao_Desempenho'], fill=True, color='lightcoral')
plt.title('Estimativa de Densidade da Avaliação de Desempenho', fontsize=16)
plt.xlabel('Avaliação de Desempenho', fontsize=12)
plt.ylabel('Densidade', fontsize=12)
plt.grid(True, linestyle='--', alpha=0.6)
plt.tight_layout()
plt.show()

# Gráfico de BoxPlot

plt.figure(figsize=(12, 7))
# Box Plot do Salário por Departamento
# x: coluna categórica
# y: coluna numérica
# data: o DataFrame
sns.boxplot(x='Departamento', y='Salário', data=df_grande, palette='coolwarm')
plt.title('Distribuição Salarial por Departamento', fontsize=18)
plt.xlabel('Departamento', fontsize=14)
plt.ylabel('Salário (R$)', fontsize=14)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.xticks(rotation=45, ha='right') # Rotaciona rótulos para melhor visualização
plt.tight_layout()
plt.show()

#Gráfico de BoxPlot 1
plt.figure(figsize=(12,7))
sns.boxplot(x='Senioridade', y='Avaliacao_Desempenho', data=df_grande, palette='viridis')
plt.title('Relação entre Avaliação de Desempenho e Senioridades', fontsize=18)
plt.xlabel('Senioridade', fontsize=14)
plt.ylabel('Avalição de Desempenho', fontsize=14)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.xticks(rotation=45, ha='right') # Rotaciona rótulos para melhor visualização
plt.tight_layout()
plt.show()

# Gráfico de BoxPlot 2
plt.figure(figsize=(12,7))
sns.boxplot(x='Salário', y='Cargo', data=df_grande, palette = 'viridis')
plt.title('Relação entre Salário e Cargo', fontsize=18)
plt.xlabel('Salário (R$)', fontsize=14)
plt.ylabel('Cargo', fontsize=14)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

#Gráfico de ViolinPlot
plt.figure(figsize=(12,7))
sns.violinplot(x='Avaliacao_Desempenho', y='Departamento', data=df_grande, palette = 'viridis')
plt.title('Relação entre Avaliação e Departamento', fontsize=18)
plt.xlabel('Avaliação de Desempenho', fontsize=14)
plt.ylabel('Departamento', fontsize=14)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

#Gráfico de Dispersão 3
plt.figure(figsize=(12,7))
sns.scatterplot(x='Tempo_Empresa_Anos', y='Avaliacao_Desempenho', data=df_grande, hue='Senioridade', size='Salário', sizes=(50,400), alpha=0.7)
plt.title('Relação entre Tempo na Empresa e Avaliação de Desempenho por Senioridade', fontsize=16)
plt.xlabel('Tempo na Empresa', fontsize=12)
plt.ylabel('Avaliação de Desempenho', fontsize=12)
plt.grid(True, linestyle='--', alpha=0.6)
plt.legend(title='Senioridade e Salário', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()
